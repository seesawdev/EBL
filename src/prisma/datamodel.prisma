type Post {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  published: Boolean! @default(value: false)
  title: String
  description: String
  content: String
  image: String
  author: User! @relation(name:"UserPosts")
}
type User {
  id: ID! @id
  groups: [Group] @relation(name: "UserToGroups", delete: CASCADE)
  created_at: DateTime! @createdAt
  updated_at: DateTime! @updatedAt
  discourseId: Int
  auth0Id: String @unique 
  metaData: String 
  identity: String
  email: String @unique
  name: String
  password: String
  nickname: String @unique
  friendId: String 
  guestCheckIns: Int @default(value: 0)
  eblID: String @unique
  profileStatus: ProfileStatus @default(value: PUBLIC)
  avatar: String 
  goals: [Goal] @relation(name: "UserToGoals")
  journal: [JournalEntry] @relation(name: "UserJournal")
  points: Int! @default(value: 0)
  friends: [User!]! @relation(name: "FriendsOfUser", link: TABLE)
  status: UserStatus @default(value: OFFLINE)  
  posts: [Post!]! @relation(name: "UserPosts")
  following: [User] @relation(name: "FollowingUsers", link: TABLE)
  tier: TIER! @default(value: FREE)
  role: Role @default(value: USER)
  refreshToken: String
  latestMessage: Reaction @relation(name: "LatestMessages", link: TABLE)
  leavingFrom: String
  leavingTo: String
}
enum TIER {
  FREE
  CONTRIBUTER
  PREMIUM
}
type Goal {
  id: ID! @id
  title: String!
  createdAt: DateTime! @createdAt
  projectedCompletionDate: DateTime! @projectedCompletionDate
  actualCompletionDate: DateTime! @actualCompletionDate
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
  author: User! @relation(name: "UserToGoals", link: INLINE)
}
type Group {
  id: ID! @id
  name: String!
  users: [User] @relation(name: "UserToGroups", link: TABLE)
}
enum UserStatus {
  ONLINE
  UNAVAILABLE
  OFFLINE
}
enum ProfileStatus {
  PUBLIC
  PRIVATE
  FRIENDSONLY
  DEACTIVATED
}
type JournalEntry {
  id: ID! @id
  createdAt: DateTime! @createdAt
  title: String!
  shared: Boolean! @default(value: false)
  content: String!
  author: User! @relation(name: "UserJournal", link: INLINE)
}

type AuthPayload {
  id: ID! @id
  token: String!
  user: User!
}

enum Question {
  CHOICE1
  CHOICE2
  CHOICE3
  CHOICE4
}

enum Role {
  ADMIN
  USER
}

type Message {
  id: ID! @id
  content: String!
  from: String!
  to: String!
  createdAt: DateTime! @createdAt
  reactions: [Reaction] @relation(name: "MessageReactions", link: TABLE)
}

type Reaction {
  id: ID! @id
  content: String!
  createdAt: DateTime! @createdAt
  message: Message! @relation(name: "MessageReactions")
  user: User! @relation(name: "LatestMessages")
}

