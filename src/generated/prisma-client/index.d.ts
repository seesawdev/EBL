// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  goal: (where?: GoalWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  goal: (where: GoalWhereUniqueInput) => GoalNullablePromise;
  goals: (args?: {
    where?: GoalWhereInput;
    orderBy?: GoalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Goal>;
  goalsConnection: (args?: {
    where?: GoalWhereInput;
    orderBy?: GoalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GoalConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGoal: (data: GoalCreateInput) => GoalPromise;
  updateGoal: (args: {
    data: GoalUpdateInput;
    where: GoalWhereUniqueInput;
  }) => GoalPromise;
  updateManyGoals: (args: {
    data: GoalUpdateManyMutationInput;
    where?: GoalWhereInput;
  }) => BatchPayloadPromise;
  upsertGoal: (args: {
    where: GoalWhereUniqueInput;
    create: GoalCreateInput;
    update: GoalUpdateInput;
  }) => GoalPromise;
  deleteGoal: (where: GoalWhereUniqueInput) => GoalPromise;
  deleteManyGoals: (where?: GoalWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  goal: (
    where?: GoalSubscriptionWhereInput
  ) => GoalSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GoalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "projectedCompletionDate_ASC"
  | "projectedCompletionDate_DESC"
  | "actualCompletionDate_ASC"
  | "actualCompletionDate_DESC"
  | "pointsWorth_ASC"
  | "pointsWorth_DESC"
  | "pointsEarned_ASC"
  | "pointsEarned_DESC"
  | "pointsDeducted_ASC"
  | "pointsDeducted_DESC"
  | "description_ASC"
  | "description_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "eblID_ASC"
  | "eblID_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "points_ASC"
  | "points_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GoalWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GoalWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  projectedCompletionDate_not?: Maybe<DateTimeInput>;
  projectedCompletionDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  projectedCompletionDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  projectedCompletionDate_lt?: Maybe<DateTimeInput>;
  projectedCompletionDate_lte?: Maybe<DateTimeInput>;
  projectedCompletionDate_gt?: Maybe<DateTimeInput>;
  projectedCompletionDate_gte?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate_not?: Maybe<DateTimeInput>;
  actualCompletionDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualCompletionDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualCompletionDate_lt?: Maybe<DateTimeInput>;
  actualCompletionDate_lte?: Maybe<DateTimeInput>;
  actualCompletionDate_gt?: Maybe<DateTimeInput>;
  actualCompletionDate_gte?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsWorth_not?: Maybe<Int>;
  pointsWorth_in?: Maybe<Int[] | Int>;
  pointsWorth_not_in?: Maybe<Int[] | Int>;
  pointsWorth_lt?: Maybe<Int>;
  pointsWorth_lte?: Maybe<Int>;
  pointsWorth_gt?: Maybe<Int>;
  pointsWorth_gte?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsEarned_not?: Maybe<Int>;
  pointsEarned_in?: Maybe<Int[] | Int>;
  pointsEarned_not_in?: Maybe<Int[] | Int>;
  pointsEarned_lt?: Maybe<Int>;
  pointsEarned_lte?: Maybe<Int>;
  pointsEarned_gt?: Maybe<Int>;
  pointsEarned_gte?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  pointsDeducted_not?: Maybe<Int>;
  pointsDeducted_in?: Maybe<Int[] | Int>;
  pointsDeducted_not_in?: Maybe<Int[] | Int>;
  pointsDeducted_lt?: Maybe<Int>;
  pointsDeducted_lte?: Maybe<Int>;
  pointsDeducted_gt?: Maybe<Int>;
  pointsDeducted_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<GoalWhereInput[] | GoalWhereInput>;
  OR?: Maybe<GoalWhereInput[] | GoalWhereInput>;
  NOT?: Maybe<GoalWhereInput[] | GoalWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  eblID?: Maybe<String>;
  eblID_not?: Maybe<String>;
  eblID_in?: Maybe<String[] | String>;
  eblID_not_in?: Maybe<String[] | String>;
  eblID_lt?: Maybe<String>;
  eblID_lte?: Maybe<String>;
  eblID_gt?: Maybe<String>;
  eblID_gte?: Maybe<String>;
  eblID_contains?: Maybe<String>;
  eblID_not_contains?: Maybe<String>;
  eblID_starts_with?: Maybe<String>;
  eblID_not_starts_with?: Maybe<String>;
  eblID_ends_with?: Maybe<String>;
  eblID_not_ends_with?: Maybe<String>;
  goals_every?: Maybe<GoalWhereInput>;
  goals_some?: Maybe<GoalWhereInput>;
  goals_none?: Maybe<GoalWhereInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  points?: Maybe<Int>;
  points_not?: Maybe<Int>;
  points_in?: Maybe<Int[] | Int>;
  points_not_in?: Maybe<Int[] | Int>;
  points_lt?: Maybe<Int>;
  points_lte?: Maybe<Int>;
  points_gt?: Maybe<Int>;
  points_gte?: Maybe<Int>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface GoalCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  startDate: DateTimeInput;
  projectedCompletionDate: DateTimeInput;
  actualCompletionDate: DateTimeInput;
  pointsWorth: Int;
  pointsEarned: Int;
  pointsDeducted: Int;
  description: String;
  author: UserCreateOneWithoutGoalsInput;
}

export interface UserCreateOneWithoutGoalsInput {
  create?: Maybe<UserCreateWithoutGoalsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutGoalsInput {
  id?: Maybe<ID_Input>;
  eblID: String;
  email: String;
  password: String;
  name: String;
  points?: Maybe<Int>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
}

export interface GoalUpdateInput {
  title?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  description?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutGoalsInput>;
}

export interface UserUpdateOneRequiredWithoutGoalsInput {
  create?: Maybe<UserCreateWithoutGoalsInput>;
  update?: Maybe<UserUpdateWithoutGoalsDataInput>;
  upsert?: Maybe<UserUpsertWithoutGoalsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutGoalsDataInput {
  eblID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserUpsertWithoutGoalsInput {
  update: UserUpdateWithoutGoalsDataInput;
  create: UserCreateWithoutGoalsInput;
}

export interface GoalUpdateManyMutationInput {
  title?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  eblID: String;
  goals?: Maybe<GoalCreateManyWithoutAuthorInput>;
  email: String;
  password: String;
  name: String;
  points?: Maybe<Int>;
}

export interface GoalCreateManyWithoutAuthorInput {
  create?: Maybe<GoalCreateWithoutAuthorInput[] | GoalCreateWithoutAuthorInput>;
  connect?: Maybe<GoalWhereUniqueInput[] | GoalWhereUniqueInput>;
}

export interface GoalCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  startDate: DateTimeInput;
  projectedCompletionDate: DateTimeInput;
  actualCompletionDate: DateTimeInput;
  pointsWorth: Int;
  pointsEarned: Int;
  pointsDeducted: Int;
  description: String;
}

export interface PostUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  eblID?: Maybe<String>;
  goals?: Maybe<GoalUpdateManyWithoutAuthorInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
}

export interface GoalUpdateManyWithoutAuthorInput {
  create?: Maybe<GoalCreateWithoutAuthorInput[] | GoalCreateWithoutAuthorInput>;
  delete?: Maybe<GoalWhereUniqueInput[] | GoalWhereUniqueInput>;
  connect?: Maybe<GoalWhereUniqueInput[] | GoalWhereUniqueInput>;
  set?: Maybe<GoalWhereUniqueInput[] | GoalWhereUniqueInput>;
  disconnect?: Maybe<GoalWhereUniqueInput[] | GoalWhereUniqueInput>;
  update?: Maybe<
    | GoalUpdateWithWhereUniqueWithoutAuthorInput[]
    | GoalUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | GoalUpsertWithWhereUniqueWithoutAuthorInput[]
    | GoalUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<GoalScalarWhereInput[] | GoalScalarWhereInput>;
  updateMany?: Maybe<
    GoalUpdateManyWithWhereNestedInput[] | GoalUpdateManyWithWhereNestedInput
  >;
}

export interface GoalUpdateWithWhereUniqueWithoutAuthorInput {
  where: GoalWhereUniqueInput;
  data: GoalUpdateWithoutAuthorDataInput;
}

export interface GoalUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface GoalUpsertWithWhereUniqueWithoutAuthorInput {
  where: GoalWhereUniqueInput;
  update: GoalUpdateWithoutAuthorDataInput;
  create: GoalCreateWithoutAuthorInput;
}

export interface GoalScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  projectedCompletionDate_not?: Maybe<DateTimeInput>;
  projectedCompletionDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  projectedCompletionDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  projectedCompletionDate_lt?: Maybe<DateTimeInput>;
  projectedCompletionDate_lte?: Maybe<DateTimeInput>;
  projectedCompletionDate_gt?: Maybe<DateTimeInput>;
  projectedCompletionDate_gte?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate_not?: Maybe<DateTimeInput>;
  actualCompletionDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualCompletionDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualCompletionDate_lt?: Maybe<DateTimeInput>;
  actualCompletionDate_lte?: Maybe<DateTimeInput>;
  actualCompletionDate_gt?: Maybe<DateTimeInput>;
  actualCompletionDate_gte?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsWorth_not?: Maybe<Int>;
  pointsWorth_in?: Maybe<Int[] | Int>;
  pointsWorth_not_in?: Maybe<Int[] | Int>;
  pointsWorth_lt?: Maybe<Int>;
  pointsWorth_lte?: Maybe<Int>;
  pointsWorth_gt?: Maybe<Int>;
  pointsWorth_gte?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsEarned_not?: Maybe<Int>;
  pointsEarned_in?: Maybe<Int[] | Int>;
  pointsEarned_not_in?: Maybe<Int[] | Int>;
  pointsEarned_lt?: Maybe<Int>;
  pointsEarned_lte?: Maybe<Int>;
  pointsEarned_gt?: Maybe<Int>;
  pointsEarned_gte?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  pointsDeducted_not?: Maybe<Int>;
  pointsDeducted_in?: Maybe<Int[] | Int>;
  pointsDeducted_not_in?: Maybe<Int[] | Int>;
  pointsDeducted_lt?: Maybe<Int>;
  pointsDeducted_lte?: Maybe<Int>;
  pointsDeducted_gt?: Maybe<Int>;
  pointsDeducted_gte?: Maybe<Int>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<GoalScalarWhereInput[] | GoalScalarWhereInput>;
  OR?: Maybe<GoalScalarWhereInput[] | GoalScalarWhereInput>;
  NOT?: Maybe<GoalScalarWhereInput[] | GoalScalarWhereInput>;
}

export interface GoalUpdateManyWithWhereNestedInput {
  where: GoalScalarWhereInput;
  data: GoalUpdateManyDataInput;
}

export interface GoalUpdateManyDataInput {
  title?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  projectedCompletionDate?: Maybe<DateTimeInput>;
  actualCompletionDate?: Maybe<DateTimeInput>;
  pointsWorth?: Maybe<Int>;
  pointsEarned?: Maybe<Int>;
  pointsDeducted?: Maybe<Int>;
  description?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  eblID: String;
  goals?: Maybe<GoalCreateManyWithoutAuthorInput>;
  email: String;
  password: String;
  name: String;
  points?: Maybe<Int>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
}

export interface UserUpdateInput {
  eblID?: Maybe<String>;
  goals?: Maybe<GoalUpdateManyWithoutAuthorInput>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
}

export interface UserUpdateManyMutationInput {
  eblID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  points?: Maybe<Int>;
}

export interface GoalSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GoalWhereInput>;
  AND?: Maybe<GoalSubscriptionWhereInput[] | GoalSubscriptionWhereInput>;
  OR?: Maybe<GoalSubscriptionWhereInput[] | GoalSubscriptionWhereInput>;
  NOT?: Maybe<GoalSubscriptionWhereInput[] | GoalSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Goal {
  id: ID_Output;
  title: String;
  startDate: DateTimeOutput;
  projectedCompletionDate: DateTimeOutput;
  actualCompletionDate: DateTimeOutput;
  pointsWorth: Int;
  pointsEarned: Int;
  pointsDeducted: Int;
  description: String;
}

export interface GoalPromise extends Promise<Goal>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  projectedCompletionDate: () => Promise<DateTimeOutput>;
  actualCompletionDate: () => Promise<DateTimeOutput>;
  pointsWorth: () => Promise<Int>;
  pointsEarned: () => Promise<Int>;
  pointsDeducted: () => Promise<Int>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface GoalSubscription
  extends Promise<AsyncIterator<Goal>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  projectedCompletionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  actualCompletionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  pointsWorth: () => Promise<AsyncIterator<Int>>;
  pointsEarned: () => Promise<AsyncIterator<Int>>;
  pointsDeducted: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface GoalNullablePromise
  extends Promise<Goal | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  projectedCompletionDate: () => Promise<DateTimeOutput>;
  actualCompletionDate: () => Promise<DateTimeOutput>;
  pointsWorth: () => Promise<Int>;
  pointsEarned: () => Promise<Int>;
  pointsDeducted: () => Promise<Int>;
  description: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  eblID: String;
  email: String;
  password: String;
  name: String;
  points: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  eblID: () => Promise<String>;
  goals: <T = FragmentableArray<Goal>>(args?: {
    where?: GoalWhereInput;
    orderBy?: GoalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  eblID: () => Promise<AsyncIterator<String>>;
  goals: <T = Promise<AsyncIterator<GoalSubscription>>>(args?: {
    where?: GoalWhereInput;
    orderBy?: GoalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  eblID: () => Promise<String>;
  goals: <T = FragmentableArray<Goal>>(args?: {
    where?: GoalWhereInput;
    orderBy?: GoalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface GoalConnection {
  pageInfo: PageInfo;
  edges: GoalEdge[];
}

export interface GoalConnectionPromise
  extends Promise<GoalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GoalEdge>>() => T;
  aggregate: <T = AggregateGoalPromise>() => T;
}

export interface GoalConnectionSubscription
  extends Promise<AsyncIterator<GoalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GoalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGoalSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GoalEdge {
  node: Goal;
  cursor: String;
}

export interface GoalEdgePromise extends Promise<GoalEdge>, Fragmentable {
  node: <T = GoalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GoalEdgeSubscription
  extends Promise<AsyncIterator<GoalEdge>>,
    Fragmentable {
  node: <T = GoalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGoal {
  count: Int;
}

export interface AggregateGoalPromise
  extends Promise<AggregateGoal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGoalSubscription
  extends Promise<AsyncIterator<AggregateGoal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GoalSubscriptionPayload {
  mutation: MutationType;
  node: Goal;
  updatedFields: String[];
  previousValues: GoalPreviousValues;
}

export interface GoalSubscriptionPayloadPromise
  extends Promise<GoalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GoalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GoalPreviousValuesPromise>() => T;
}

export interface GoalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GoalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GoalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GoalPreviousValuesSubscription>() => T;
}

export interface GoalPreviousValues {
  id: ID_Output;
  title: String;
  startDate: DateTimeOutput;
  projectedCompletionDate: DateTimeOutput;
  actualCompletionDate: DateTimeOutput;
  pointsWorth: Int;
  pointsEarned: Int;
  pointsDeducted: Int;
  description: String;
}

export interface GoalPreviousValuesPromise
  extends Promise<GoalPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  projectedCompletionDate: () => Promise<DateTimeOutput>;
  actualCompletionDate: () => Promise<DateTimeOutput>;
  pointsWorth: () => Promise<Int>;
  pointsEarned: () => Promise<Int>;
  pointsDeducted: () => Promise<Int>;
  description: () => Promise<String>;
}

export interface GoalPreviousValuesSubscription
  extends Promise<AsyncIterator<GoalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  projectedCompletionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  actualCompletionDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  pointsWorth: () => Promise<AsyncIterator<Int>>;
  pointsEarned: () => Promise<AsyncIterator<Int>>;
  pointsDeducted: () => Promise<AsyncIterator<Int>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  eblID: String;
  email: String;
  password: String;
  name: String;
  points: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  eblID: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  points: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  eblID: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  points: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Goal",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
