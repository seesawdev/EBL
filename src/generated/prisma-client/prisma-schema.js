module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateGoal {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Goal {
  id: ID!
  title: String!
  startDate: DateTime!
  projectedCompletionDate: DateTime!
  actualCompletionDate: DateTime!
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
  author: User!
}

type GoalConnection {
  pageInfo: PageInfo!
  edges: [GoalEdge]!
  aggregate: AggregateGoal!
}

input GoalCreateInput {
  id: ID
  title: String!
  startDate: DateTime!
  projectedCompletionDate: DateTime!
  actualCompletionDate: DateTime!
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
  author: UserCreateOneWithoutGoalsInput!
}

input GoalCreateManyWithoutAuthorInput {
  create: [GoalCreateWithoutAuthorInput!]
  connect: [GoalWhereUniqueInput!]
}

input GoalCreateWithoutAuthorInput {
  id: ID
  title: String!
  startDate: DateTime!
  projectedCompletionDate: DateTime!
  actualCompletionDate: DateTime!
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
}

type GoalEdge {
  node: Goal!
  cursor: String!
}

enum GoalOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  startDate_ASC
  startDate_DESC
  projectedCompletionDate_ASC
  projectedCompletionDate_DESC
  actualCompletionDate_ASC
  actualCompletionDate_DESC
  pointsWorth_ASC
  pointsWorth_DESC
  pointsEarned_ASC
  pointsEarned_DESC
  pointsDeducted_ASC
  pointsDeducted_DESC
  description_ASC
  description_DESC
}

type GoalPreviousValues {
  id: ID!
  title: String!
  startDate: DateTime!
  projectedCompletionDate: DateTime!
  actualCompletionDate: DateTime!
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
}

input GoalScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  projectedCompletionDate: DateTime
  projectedCompletionDate_not: DateTime
  projectedCompletionDate_in: [DateTime!]
  projectedCompletionDate_not_in: [DateTime!]
  projectedCompletionDate_lt: DateTime
  projectedCompletionDate_lte: DateTime
  projectedCompletionDate_gt: DateTime
  projectedCompletionDate_gte: DateTime
  actualCompletionDate: DateTime
  actualCompletionDate_not: DateTime
  actualCompletionDate_in: [DateTime!]
  actualCompletionDate_not_in: [DateTime!]
  actualCompletionDate_lt: DateTime
  actualCompletionDate_lte: DateTime
  actualCompletionDate_gt: DateTime
  actualCompletionDate_gte: DateTime
  pointsWorth: Int
  pointsWorth_not: Int
  pointsWorth_in: [Int!]
  pointsWorth_not_in: [Int!]
  pointsWorth_lt: Int
  pointsWorth_lte: Int
  pointsWorth_gt: Int
  pointsWorth_gte: Int
  pointsEarned: Int
  pointsEarned_not: Int
  pointsEarned_in: [Int!]
  pointsEarned_not_in: [Int!]
  pointsEarned_lt: Int
  pointsEarned_lte: Int
  pointsEarned_gt: Int
  pointsEarned_gte: Int
  pointsDeducted: Int
  pointsDeducted_not: Int
  pointsDeducted_in: [Int!]
  pointsDeducted_not_in: [Int!]
  pointsDeducted_lt: Int
  pointsDeducted_lte: Int
  pointsDeducted_gt: Int
  pointsDeducted_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
  NOT: [GoalScalarWhereInput!]
}

type GoalSubscriptionPayload {
  mutation: MutationType!
  node: Goal
  updatedFields: [String!]
  previousValues: GoalPreviousValues
}

input GoalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoalWhereInput
  AND: [GoalSubscriptionWhereInput!]
  OR: [GoalSubscriptionWhereInput!]
  NOT: [GoalSubscriptionWhereInput!]
}

input GoalUpdateInput {
  title: String
  startDate: DateTime
  projectedCompletionDate: DateTime
  actualCompletionDate: DateTime
  pointsWorth: Int
  pointsEarned: Int
  pointsDeducted: Int
  description: String
  author: UserUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateManyDataInput {
  title: String
  startDate: DateTime
  projectedCompletionDate: DateTime
  actualCompletionDate: DateTime
  pointsWorth: Int
  pointsEarned: Int
  pointsDeducted: Int
  description: String
}

input GoalUpdateManyMutationInput {
  title: String
  startDate: DateTime
  projectedCompletionDate: DateTime
  actualCompletionDate: DateTime
  pointsWorth: Int
  pointsEarned: Int
  pointsDeducted: Int
  description: String
}

input GoalUpdateManyWithoutAuthorInput {
  create: [GoalCreateWithoutAuthorInput!]
  delete: [GoalWhereUniqueInput!]
  connect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  disconnect: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [GoalScalarWhereInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
}

input GoalUpdateManyWithWhereNestedInput {
  where: GoalScalarWhereInput!
  data: GoalUpdateManyDataInput!
}

input GoalUpdateWithoutAuthorDataInput {
  title: String
  startDate: DateTime
  projectedCompletionDate: DateTime
  actualCompletionDate: DateTime
  pointsWorth: Int
  pointsEarned: Int
  pointsDeducted: Int
  description: String
}

input GoalUpdateWithWhereUniqueWithoutAuthorInput {
  where: GoalWhereUniqueInput!
  data: GoalUpdateWithoutAuthorDataInput!
}

input GoalUpsertWithWhereUniqueWithoutAuthorInput {
  where: GoalWhereUniqueInput!
  update: GoalUpdateWithoutAuthorDataInput!
  create: GoalCreateWithoutAuthorInput!
}

input GoalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  projectedCompletionDate: DateTime
  projectedCompletionDate_not: DateTime
  projectedCompletionDate_in: [DateTime!]
  projectedCompletionDate_not_in: [DateTime!]
  projectedCompletionDate_lt: DateTime
  projectedCompletionDate_lte: DateTime
  projectedCompletionDate_gt: DateTime
  projectedCompletionDate_gte: DateTime
  actualCompletionDate: DateTime
  actualCompletionDate_not: DateTime
  actualCompletionDate_in: [DateTime!]
  actualCompletionDate_not_in: [DateTime!]
  actualCompletionDate_lt: DateTime
  actualCompletionDate_lte: DateTime
  actualCompletionDate_gt: DateTime
  actualCompletionDate_gte: DateTime
  pointsWorth: Int
  pointsWorth_not: Int
  pointsWorth_in: [Int!]
  pointsWorth_not_in: [Int!]
  pointsWorth_lt: Int
  pointsWorth_lte: Int
  pointsWorth_gt: Int
  pointsWorth_gte: Int
  pointsEarned: Int
  pointsEarned_not: Int
  pointsEarned_in: [Int!]
  pointsEarned_not_in: [Int!]
  pointsEarned_lt: Int
  pointsEarned_lte: Int
  pointsEarned_gt: Int
  pointsEarned_gte: Int
  pointsDeducted: Int
  pointsDeducted_not: Int
  pointsDeducted_in: [Int!]
  pointsDeducted_not_in: [Int!]
  pointsDeducted_lt: Int
  pointsDeducted_lte: Int
  pointsDeducted_gt: Int
  pointsDeducted_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  author: UserWhereInput
  AND: [GoalWhereInput!]
  OR: [GoalWhereInput!]
  NOT: [GoalWhereInput!]
}

input GoalWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createGoal(data: GoalCreateInput!): Goal!
  updateGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateManyGoals(data: GoalUpdateManyMutationInput!, where: GoalWhereInput): BatchPayload!
  upsertGoal(where: GoalWhereUniqueInput!, create: GoalCreateInput!, update: GoalUpdateInput!): Goal!
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteManyGoals(where: GoalWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String!
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  published: Boolean
  title: String!
  content: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  published: Boolean
  title: String!
  content: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  published: Boolean
  published_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  goal(where: GoalWhereUniqueInput!): Goal
  goals(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Goal]!
  goalsConnection(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoalConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  goal(where: GoalSubscriptionWhereInput): GoalSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  eblID: String!
  goals(where: GoalWhereInput, orderBy: GoalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Goal!]
  email: String!
  password: String!
  name: String!
  points: Int!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  eblID: String!
  goals: GoalCreateManyWithoutAuthorInput
  email: String!
  password: String!
  name: String!
  points: Int
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutGoalsInput {
  create: UserCreateWithoutGoalsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGoalsInput {
  id: ID
  eblID: String!
  email: String!
  password: String!
  name: String!
  points: Int
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  id: ID
  eblID: String!
  goals: GoalCreateManyWithoutAuthorInput
  email: String!
  password: String!
  name: String!
  points: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  eblID_ASC
  eblID_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  points_ASC
  points_DESC
}

type UserPreviousValues {
  id: ID!
  eblID: String!
  email: String!
  password: String!
  name: String!
  points: Int!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  eblID: String
  goals: GoalUpdateManyWithoutAuthorInput
  email: String
  password: String
  name: String
  points: Int
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  eblID: String
  email: String
  password: String
  name: String
  points: Int
}

input UserUpdateOneRequiredWithoutGoalsInput {
  create: UserCreateWithoutGoalsInput
  update: UserUpdateWithoutGoalsDataInput
  upsert: UserUpsertWithoutGoalsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGoalsDataInput {
  eblID: String
  email: String
  password: String
  name: String
  points: Int
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  eblID: String
  goals: GoalUpdateManyWithoutAuthorInput
  email: String
  password: String
  name: String
  points: Int
}

input UserUpsertWithoutGoalsInput {
  update: UserUpdateWithoutGoalsDataInput!
  create: UserCreateWithoutGoalsInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  eblID: String
  eblID_not: String
  eblID_in: [String!]
  eblID_not_in: [String!]
  eblID_lt: String
  eblID_lte: String
  eblID_gt: String
  eblID_gte: String
  eblID_contains: String
  eblID_not_contains: String
  eblID_starts_with: String
  eblID_not_starts_with: String
  eblID_ends_with: String
  eblID_not_ends_with: String
  goals_every: GoalWhereInput
  goals_some: GoalWhereInput
  goals_none: GoalWhereInput
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  points: Int
  points_not: Int
  points_in: [Int!]
  points_not_in: [Int!]
  points_lt: Int
  points_lte: Int
  points_gt: Int
  points_gte: Int
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    