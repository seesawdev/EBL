#import Query.users, Post, UserUpdateInput, UserCreateInput, from './prisma/generated/prisma-client/prisma-schema.graphql'

directive @isAuthenticated on OBJECT | QUERY | MUTATION | FIELD_DEFINITION
directive @hasRole(roles: [String]) on QUERY | MUTATION | FIELD_DEFINITION
directive @isOwner(type: String) on QUERY | MUTATION | FIELD_DEFINITION
directive @isOwnerOrHasRole(type: String, roles: [String]) on QUERY | MUTATION | FIELD_DEFINITION
# directive @auth on QUERY | FIELD_DEFINITION | FIELD
enum CacheControlScope {
    PUBLIC
    PRIVATE
  }
  
  directive @cacheControl (
    maxAge: Int
    scope: CacheControlScope
  ) on FIELD_DEFINITION | OBJECT | INTERFACE
type Query {
  status(filter: String): User!
  bulletinPostHistory: [Post!]! @isAuthenticated
  feed(filter: String): [Post!]!
  drafts: [Post!]! @isAuthenticated
  post(id: ID!): Post @isOwnerOrHasRole(type: "Post", roles: ["ADMIN"] )
  me: User! @isAuthenticated
  users(id: ID, nickname: String): [User!]!
  friends(nickname: String!): String!
  followers: Int
  friendCount: Int
  goals(id: ID, title: String): [Goal!]!
  goalsByUser(id: ID): [Goal!]!
  getGoalCount(id: ID): Int

  """
  displays friendslist of username passed in as argument
  """
  userFriends(nickname: String): [User!]!
  friendExists(nickname: String): Boolean
  getUserStatus(status: UserStatus!): [User!]!
}
input ProfileInput {
  avatar: String
  email: String
  password: String
  notes: [String]
}
input PostCreateInput {
  published: Boolean
  title: String
  description: String
  content: String
  author: UserCreateOneWithoutPostsInput

}
type Mutation {
  joinGroup(name: [String!]): [Group!]!
  logout: User 

  createUserFromFormData(email: String!, password: String!, username: String!, metadata: [String], avatar: String, leavingTo: String, leavingFrom: String, updated_at: String,  auth0Id: String, eblID: String, status: String, friendId: String): SignUpPayload!
  signup(email: String!, password: String!, username: String!, metadata: [String], avatar: String, leavingTo: String, leavingFrom: String, created_at: String, updated_at: String,  auth0Id: String, eblID: String, status: String): SignUpPayload!
  login(email: String!, password: String!): AuthPayload!
  authenticate(access_token: String!, id_token: String): AuthPayload!
  createDraft(title: String!, content: String!): Post @isAuthenticated
  publish(id: ID!): Post! @isOwner(type: "Post")
  postWithoutDraft(title: String, content: String): Post!
  deletePost(id: ID!): Post! @isOwnerOrHasRole(type: "Post", roles:["ADMIN"])
  setUserStatus(id: ID, input: UserStatus!): User!
  updateProfile(input: ProfileInput): User!
  #createNewUser(email: String!, password: String!, username: String, avatar: String, data: String): User!
  postGoal(id: ID, title: String!, description: String!): Goal!
  """
   adds two users to each other's friendlist
  """
  addUserToFriendlist(nickname: String): String
  """
   removes two users from each other's friendlist
  """
  removeUserFromFriendlist(nickname1: String, nickname2: String): String
  """
   follow another user's public account 
  """
  followUser(nickname: String): User
  updateUserProfile(input: ProfileInput): User
}

type Subscription {
  feedSubscription: Post
  userStatusSubscription: User
}
type SignUpPayload {
  token: String!
  user: User!
}

type AuthPayload {
  token: String!
  user: User!
}

type User @cacheControl(maxAge: 120){
  id: ID!
  auth0Id: String
  friendId: String
  groups: [Group]
  discourseId: Int
  eblID: String
  identity: String!
  avatar: String @cacheControl(maxAge: 240)
  email: String @isOwner(type: "User")
  name: String
  nickname: String
  guestCheckIns: Int
  goals: [Goal]
  points: Int!
  friends: [User!]!
  status: UserStatus
  password: String!
  posts: [Post!]!
  following: [User]
  metadata: [String]
  profileStatus: ProfileStatus
  tier: TIER!
  refreshToken: String
  leavingFrom: String
  leavingTo: String
}
type Group {
  id: ID! 
  name: String!
  users: [User] 
}
enum ProfileStatus {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum TIER {
  FREE
  CONTRIBUTER
  PREMIUM
}

enum UserStatus {
  ONLINE
  UNAVAILABLE
  OFFLINE
}

type Goal {
  id: ID!
  title: String!
  createdAt: String!
  projectedCompletionDate: String
  actualCompletionDate: String
  pointsWorth: Int
  pointsEarned: Int
  pointsDeducted: Int
  description: String!
  author: User!
}

type Post {
  id: ID!
  published: Boolean!
  title: String
  createdAt: String
  updatedAt: String
  description: String
  content: String
  image: String
  author: User!
}
type JournalEntry {
  id: ID!
  title: String!
  shared: Boolean!
  content: String!
  author: User!
}

input FormData {
  username: String!
  email: String!
  password: String!
  leavingFrom: String!
  leavingTo: String!
  Q3: String
}

enum Question {
  CHOICE1
  CHOICE2
  CHOICE3
  CHOICE4
}