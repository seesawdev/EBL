type Query {
  feed(filter: String): [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  me: User
  users(id: ID, username: String): [User!]!
  friends(username: String!): String!
  followers: Int
  friendCount: Int
  """displays friendslist of username passed in as argument"""
  userFriends(username: String): [User!]!
  friendExists(username: String): Boolean 
  getUserStatus(status: UserStatus!): [User!]!

}
input ProfileInput {
  avatar: String
  email: String
  password: String
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, content: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!
  setUserStatus(id: ID, input: UserStatus!): User!
  updateProfile(input: ProfileInput): User!
  """ adds two users to each other's friendlist """
  addUserToFriendlist(username: String): String
  """ removes two users from each other's friendlist """
  removeUserFromFriendlist(username1: String, username2: String): String
  """ follow another user's public account """
  followUser(username: String): User
}

type Subscription {
  feedSubscription: Post
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID! 
  eblID: String!
  profilePic: String!
  goals: [Goal] 
  email: String! 
  password: String!
  name: String!
  points: Int! 
  friends: [User!]! 
  status: UserStatus  
  posts: [Post!]!
  following: [User] 
  profileStatus: ProfileStatus
  tier: TIER! 
}
enum ProfileStatus {
  PUBLIC 
  PRIVATE 
  FRIENDS 
}

enum TIER {
  FREE
  CONTRIBUTER
  PREMIUM
}

enum UserStatus {
  ONLINE
  UNAVAILABLE
  OFFLINE
}

type Goal {
  id: ID! 
  title: String!
  startDate: DateTime!
  projectedCompletionDate: DateTime!
  actualCompletionDate: DateTime!
  pointsWorth: Int!
  pointsEarned: Int!
  pointsDeducted: Int!
  description: String!
  author: User!
}

type Post {
  id: ID!
  published: Boolean!
  title: String!
  info: String!
  content: String!
  author: User!
}
type JournalEntry {
  id: ID! 
  title: String!
  shared: Boolean!
  content: String!
  author: User!
}